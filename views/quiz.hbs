<div id="app" class="col-12 col-lg-8 offset-lg-2">
  <div class="quiz-container" v-if="quiz && questions.length">
    <h2 class="quiz-card__title text-center mt-4">|| quiz.name ||</h2>
    <div class="card quiz-card shadow-lg mt-4">
      <div class="card-body">
        <div class="quiz--intro p-3" v-if="!quizStarted">
          <p class="quiz-card__description text-center">
            || quiz.description ||
          </p>
          <p class="text-center"><strong>|| quiz.numberOfQuestions||</strong> questions</p>
          <input type="text" class="form-control form-control-lg" v-model="responderName" placeholder="Enter your name"
            @keyup.enter="startQuiz" ref="nameInput">
          <small class="form-text">Hit <span class="badge bg-tertiary">Enter</span> to start</small>
          <div class="quiz-card__controls mt-4 d-flex justify-content-center">
            <button type="button" class="btn btn-lg btn-success" @click="startQuiz">Ready!</button>
          </div>
        </div>
        <transition-group name="slide-fade">
          <div class="quiz--slide p-3" v-for="(item, index) in questions" :key="item._id"
            v-if="quizStarted && !quizFinished && index === currentQuestion">
            <div class="quiz-slide__content">
              <div class="quiz--number text-center fw-bold">|| currentQuestion + 1 ||/|| questions.length ||</div>
              <div class="quiz--progress-bar mb-4">
                <div class="quiz--progress-bar-inner" :style="{ width: currentQuestion / questions.length * 100 + '%'}">
                </div>
              </div>
              <h4>|| item.question ||</h4>
              <div v-if="item.type === 'single'">
                <input type="text" class="form-control mt-4" v-model="currentAnswer" placeholder="Type here"
                  ref="answerInput">
                <small class="form-text">Hit <span class="badge bg-tertiary">Enter</span> for the next question</small>
              </div>
              <div v-if="item.type === 'multiple'">
                <div class="form-check" v-for="answer in item.shuffledAnswers" :key="answer.id">
                  <input class="form-check-input" type="radio" :id="answer.id" v-model="currentAnswer"
                    :value="answer.content">
                  <label class="form-check-label" :for="answer.id">
                    || answer.content ||
                  </label>
                </div>
                <small class="form-text">Hit <span class="badge bg-tertiary">Enter</span> for the next question</small>
              </div>
            </div>
            <div class="quiz-slide__controls mt-4 d-flex justify-content-between">
              <button type="button" class="btn btn-secondary" @click="previousQuestion"><i class="fas"
                  :class="index === 0 ? 'fa-ban' : 'fa-angle-left'"></i>
                || index === 0 ? 'Restart quiz' : 'Previous question' ||
              </button>
              <button type="button" class="btn btn-primary" @click="nextQuestion">Next question <i
                  class="fas fa-angle-right"></i></button>
            </div>
          </div>
        </transition-group>
        <div class="quiz--conclusion p-3" v-if="quizFinished">
          <h1 class="text-center fw-bold mb-4">ðŸ™Œ ðŸŽ‰ Nice one! ðŸŽ‰ ðŸ™Œ</h1>
          <h2>Your results</h2>
          <ul class="list-group mb-4">
            <li class="list-group-item" :class="question.correct ? 'list-group-item-success' : 'list-group-item-danger'"
              v-for="(question, index) in questions">
              <div class="fw-bold"><i class="fas"
                  :class="question.correct ? 'fa-check-circle text-success' : 'fa-times-circle text-danger'"></i> ||
                question.question ||</div>
              <div class="mt-2"><strong>You said: </strong> || answers[index] ||</div>
              <div class="mt-2" v-if="question.correct && question.answers.length > 1"><strong>Other answers: </strong>
                || question.answers.filter(v => v.toLowerCase().trim() !== answers[index].toLowerCase().trim()).join(', ') ||</strong></div>
              <div class="mt-2" v-if="!question.correct"><strong>Answer(s): </strong> || question.answers.join(', ')
                ||</strong></div>
            </li>
          </ul>
          <h3 class="text-success text-center fw-bold mb-4">Score: || questions.filter(o => o.correct).length ||/||
            questions.length||</h3>
          <div class="text-muted">Your results have been recorded, you can now close this tab.</div>
        </div>
      </div>
    </div>
  </div>
  <div v-else class="text-center">
    <i class="fas fa-spinner fa-spin"></i> Loading...
  </div>
</div>

<script>
  var app = new Vue({
    el: '#app',
    delimiters: ['||', '||'],
    data: {
      message: 'Hello Vue!',
      quiz: null,
      questions: null,
      quizStarted: false,
      quizFinished: false,
      currentQuestion: 0,
      currentAnswer: '',
      responderName: '',
      answers: {}
    },
    methods: {
      startQuiz() {
        this.quizStarted = true;
        // Focus the input element
        this.$nextTick(() => {
          if (this.$refs.answerInput[0]) {
            this.$refs.answerInput[0].focus();
          }
        })
      },
      finishQuiz() {
        Object.keys(this.answers).forEach(o => {
          console.log("Running", o)
          // If all answers are valid, mark it as such
          if (this.questions[o].anyAnswerValid === true) {
            this.questions[o].correct = true
            return true;
          }
          let answer = this.answers[o].toLowerCase().trim()
          let correctAnswers = this.questions[o].answers.map(v => v.toLowerCase().trim())
          console.log(correctAnswers)
          if (correctAnswers.includes(answer)) {
            this.questions[o].correct = true;
          }
        })
        var payload = {
          topicId: this.quiz.topic,
          quizId: this.quiz._id,
          questions: this.questions.map((o, i) => {
            return {
              question: o._id,
              correct: o.correct || false,
              answer: this.answers[i],
              correctAnswers: this.questions[i].answers,
              anyAnswerValid: this.questions[i].anyAnswerValid,
            }
          }),
          name: this.responderName
        }
        console.log(payload)
        $.post('/api/attempt', payload, function (data) {
          console.log(data)
        })
        this.quizFinished = true;
      },
      nextQuestion() {
        // End the quiz if we're on the last question
        if (this.currentQuestion === this.questions.length - 1) {
          // Save the current answer for the current question
          this.answers[this.currentQuestion] = this.currentAnswer;
          this.finishQuiz();
        } else {
          // Save the current answer for the current question
          this.answers[this.currentQuestion] = this.currentAnswer;
          // Do we have a saved answer for the next question?
          if (this.answers[this.currentQuestion + 1]) {
            this.currentAnswer = this.answers[this.currentQuestion + 1];
          } else {
            // If not, reset the text field
            this.currentAnswer = "";
          }
          // Move to the next question
          this.currentQuestion = this.currentQuestion + 1;
          // Focus the input element
          this.$nextTick(() => {
            if (this.$refs.answerInput[0]) {
              this.$refs.answerInput[0].focus();
            }
          })
        }
      },
      previousQuestion() {
        // Reset the quiz if we're on question 0
        if (this.currentQuestion === 0) {
          this.quizStarted = false;
          this.answers = {}
          this.currentAnswer = ""
          this.responderName = ""
        } else {
          // Save the current answer for the current question
          this.answers[this.currentQuestion] = this.currentAnswer;
          // Do we have a saved answer for the previous question?
          if (this.answers[this.currentQuestion - 1]) {
            this.currentAnswer = this.answers[this.currentQuestion - 1];
          } else {
            // If not, reset the text field
            this.currentAnswer = "";
          }
          // Move to the previous question
          this.currentQuestion = this.currentQuestion - 1;
          // Focus the input element
          this.$nextTick(() => {
            if (this.$refs.answerInput[0]) {
              this.$refs.answerInput[0].focus();
            }
          })
        }
      }
    },
    beforeMount() {
      $.ajax({
        url: '/api/quiz/{{quiz._id}}',
        context: this,
        success: function (data) {
          this.quiz = data.quiz
          this.questions = data.questions
          console.log(this.questions)
          this.$nextTick(() => {
            if (this.$refs.nameInput) {
              this.$refs.nameInput.focus()
            }
          })
        }
      });
    },
    mounted() {
      window.addEventListener('keypress', (e) => {
        if (e.key == 'Enter' && this.quizStarted && !this.quizFinished) {
          this.nextQuestion()
        }
      });

    }
  })
</script>

<style>
  .quiz-card {
    overflow: hidden;
  }

  .quiz-slide__content {
    min-height: 300px;
  }

  .quiz--progress-bar {
    width: 100%;
    background: #e9ecef;
    border-radius: 10px;
    height: 10px;
    overflow: hidden;
  }

  .quiz--progress-bar-inner {
    background: #61d6a0;
    height: 10px;
  }

  .slide-fade-enter-active {
    transition: all .15s ease;
  }

  .slide-fade-leave-active {
    transition: all .15s cubic-bezier(1.0, 0.5, 0.8, 1.0);
  }

  .slide-fade-enter,
  .slide-fade-leave-to {
    position: absolute;
    transform: translateX(50px);
    opacity: 0;
  }
</style>